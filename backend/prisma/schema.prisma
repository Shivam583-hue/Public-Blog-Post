// Define your database provider as PostgreSQL in the datasource block
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                          Int       @id @default(autoincrement())
  username                    String    @db.VarChar(255)
  email                       String    @unique @db.VarChar(255)
  password                    String    @db.VarChar(255)
  lastLogin                   DateTime? @default(now())
  isVerified                  Boolean   @default(false)
  resetPasswordToken          String?   @db.VarChar(255)               
  resetPasswordExpiresAt      DateTime?
  verificationToken           String?   @db.VarChar(255)              
  verificationTokenExpiresAt  DateTime?
  bio                         String?   @db.VarChar(500)
  profilePic                  String?   @db.VarChar(255)
  createdAt                   DateTime  @default(now())
  updatedAt                   DateTime  @updatedAt

  followers                   Follow[] @relation("UserFollowing")
  following                   Follow[] @relation("UserFollowers")

  blogs       Blog[]
  bookmarks   Bookmark[]
  comments    Comment[]
  likes       Like[]
}
model Follow {
  id        Int  @id @default(autoincrement())
  followerId Int
  followedId Int

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  followed   User @relation("UserFollowing", fields: [followedId], references: [id])

  @@unique([followerId, followedId])
  @@index([followerId])
  @@index([followedId])
}


model Blog {
  blog_id     Int       @id @default(autoincrement())
  createdAt   DateTime  @default(now())
  title       String    @db.VarChar(30)
  likeCount   Int       @default(0)  
  writtenby   String
  userId      Int       
  categoryId  Int
  description String
  image_url   String
  content     String

  user        User      @relation(fields: [userId], references: [id])
  category    Category  @relation(fields: [categoryId], references: [id])
  comments    Comment[]
  bookmarks   Bookmark[]
  likes       Like[]    

  @@index([userId])
  @@index([categoryId])
}

model Bookmark {
  id          Int      @id @default(autoincrement())
  userId      Int
  blogId      Int      

  user        User     @relation(fields: [userId], references: [id])
  blog        Blog     @relation(fields: [blogId], references: [blog_id],onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId])
  @@index([blogId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  content   String
  userId    Int
  blogId    Int
  createdAt DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  blog      Blog     @relation(fields: [blogId], references: [blog_id])
  

  @@index([userId])
  @@index([blogId])
}

model Category {
  id      Int      @id @default(autoincrement())
  name    String   @unique
  blogs   Blog[]
}

model Like {
  id      Int  @id @default(autoincrement())
  userId  Int
  blogId  Int

  user    User @relation(fields: [userId], references: [id])
  blog    Blog @relation(fields: [blogId], references: [blog_id],onDelete: Cascade)

  @@unique([userId, blogId])
  @@index([userId])
  @@index([blogId])
}